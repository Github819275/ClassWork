Queue = ['' for i in range(50)]  # DECLARE Queue[0:49] : String
HeadPointer = -1
TailPointer = 0


def Enqueue(value):
    global HeadPointer, TailPointer
    if TailPointer == 50:
        print('Queue is full')
    else:
        if HeadPointer == -1:
            HeadPointer = 0
        Queue[TailPointer] = value
        TailPointer += 1


def Dequeue():
    global HeadPointer, TailPointer
    if HeadPointer == -1 or HeadPointer == TailPointer:
        return 'Empty'
    else:
        HeadPointer = HeadPointer + 1
        return Queue[HeadPointer - 1]


def ReadData():
    file = open("QueueData.txt", 'r')
    line = file.readline().strip()
    while len(line) > 0:
        Enqueue(line)
        line = file.readline().strip()
    file.close()


class RecordData:
    def __init__(self):
        self.ID = ''  # DECLARE PRIVATE ID : STRING
        self.Total = 0  # DECLARE PRIVATE Total : INTEGER


Records = [RecordData() for i in range(50)]
NumberRecords = 0


def TotalData():
    global NumberRecords
    DataAccessed = Dequeue()
    Flag = False
    if NumberRecords == 0:
        Records[NumberRecords].ID = DataAccessed
        Records[NumberRecords].Total = 1
        Flag = True
        NumberRecords = NumberRecords + 1
    else:
        for x in range(NumberRecords - 1):
            if Records[x].ID == DataAccessed:
                Records[x].Total = Records[x].Total + 1
                Flag = True
    if not Flag:
        Records[NumberRecords].ID = DataAccessed
        Records[NumberRecords].Total = 1
        NumberRecords += 1


def OutputRecords():
    global NumberRecords
    for i in range(NumberRecords):
        print(f"ID {Records[i].ID}   Total {Records[i].Total}")


ReadData()
while HeadPointer != TailPointer:
    TotalData()
OutputRecords()
